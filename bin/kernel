#!/bin/bash

# Colors

RCol='\e[0m'    # Text Reset
# Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
Bla='\e[0;30m';     BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m';   On_Bla='\e[40m';    On_IBla='\e[0;100m';
Red='\e[0;31m';     BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m';   On_Red='\e[41m';    On_IRed='\e[0;101m';
Gre='\e[0;32m';     BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m';   On_Gre='\e[42m';    On_IGre='\e[0;102m';
Yel='\e[0;33m';     BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m';   On_Yel='\e[43m';    On_IYel='\e[0;103m';
Blu='\e[0;34m';     BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m';   On_Blu='\e[44m';    On_IBlu='\e[0;104m';
Pur='\e[0;35m';     BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m';   On_Pur='\e[45m';    On_IPur='\e[0;105m';
Cya='\e[0;36m';     BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m';   On_Cya='\e[46m';    On_ICya='\e[0;106m';
Whi='\e[0;37m';     BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m';   On_Whi='\e[47m';    On_IWhi='\e[0;107m';

# Kernel info
kernel_dir=$PWD
THREADS=-j$( nproc --all )
image_name=Image.gz-dtb
export ARCH=arm64

while [[ $# -ge 1 ]]; do
	case "${1}" in

		# Check the arch
		"-a" | "--arch")
			shift

			export ARCH=${1};;

		# Check the device name
		"-d" | "--device")
			shift

			defconfig=${1}_defconfig
			device_name=${1};;

		# Check the Kernel name
		"-n" | "--name")
			shift

			kernel_name=${1};;

		# Check the GCC version
		"-c" | "--compiler")
			shift
			compiler=${1};;

		# Check the kernel image name
		"-i" | "--image")
			shift
			image_name=${1};;

		"--do-modules")
			shift
			modules=true;;

		*)
			echo -e "${BRed} "
			echo -e "=============================================="
			echo -e " "
			echo -e "             Invalid command!"
			echo -e " "
			echo -e "=============================================="
			echo -e "${RCol}"
			exit 1;;
	esac

	shift
done

anykernel=$kernel_dir/../anykernel
CONFIG_FILE=$defconfig

case "$compiler" in

	"gcc")
		export CROSS_COMPILE=$gccpath;;

	"clang")
		export CROSS_COMPILE=$gccpath
		export CLANG_TRIPLE=aarch64-linux-gnu-
		CLANG_CC="CC=$clangpath/bin/clang";;

	*)
		echo -e "${BRed} "
		echo -e "=============================================="
		echo -e " "
		echo -e "             Invalid Toolchain!"
		echo -e " "
		echo -e "=============================================="
		echo -e "${RCol}"
		exit 1;;
esac

if [[ -f arch/$ARCH/configs/$defconfig ]]; then
	objdir=$kernel_dir/../out/$device_name
	image_path=$objdir/arch/$ARCH/boot/$image_name
else
	echo -e "${BRed} "
	echo -e "=============================================="
	echo -e " "
	echo -e "            Invalid Kernel device!"
	echo -e " "
	echo -e "=============================================="
	echo -e "${RCol}"
	exit 1
fi

# Create the out folder
if [[ ! -d $objdir ]]; then
	mkdir -p $objdir
fi

# Start building
echo -e "${BGre}"
echo -e "              Starting building"
echo -e "${BRed} "
echo -e "=============================================="
echo -e "=============================================="
echo -e "${RCol} "

# Cleanup from the old image
rm -rf $image_path

# Start the real building
echo -e "${BGre}"
echo -e "            Building the Kernel..."
echo -e "${BRed}"
echo -e "=============================================="
echo -e " "
echo -e "${RCol} "
make -s O=$objdir $CONFIG_FILE $THREADS
make -s O=$objdir $THREADS $CLANG_CC

# Check compilation status
if [ ! -f $image_path ]; then
	echo -e "${BRed}"
	echo -e "            Compilation Failed!"
	echo -e " "
	echo -e "=============================================="
	echo -e "=============================================="
	echo -e "${RCol} "
	exit 1
fi;
# Get date and time first
date="$(date +'%Y-%m-%d-%H:%M')"

# Copy Kernel image
echo -e "${BGre}"
echo -e "             Copying Kernel Image..."
echo -e "${BRed}=============================================="
echo -e "${RCol}"
cp -rf $image_path $anykernel/
if [[ $modules == "true" ]]; then
	rm -rf $anykernel/modules/system/lib/modules/*
	find $objdir/. -name "*\.ko" -exec cp  {} $anykernel/modules/system/lib/modules/ \;
fi;

# Make the package
echo -e "${BGre}"
echo -e "                Packaging..."
echo -e "${BRed}=============================================="
echo -e "${RCol} "
cd $anykernel
rm -rf *.zip

# Get date and time
date="$(date +'%Y-%m-%d-%H:%M')"

zip_name="$kernel_name-$device_name-$date.zip"
zip -r9q $zip_name * -x README.md

# Turn back to the source dir
cd $kernel_dir

# Output building state
echo -e "${BGre}"
echo -e "           Build finished succesfully!"
echo -e "${BRed}=============================================="
echo -e "=============================================="
echo -e " "
echo -e " "
echo -e "${BGre}       $zip_name"
echo -e "-----------------------------------------------"
echo -e "${RCol} "
